buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:0.6.+'
  }
}

apply plugin: 'android'

configurations { deployerJars }

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://github.com/Goddchen/mvn-repo/raw/master/' }
  maven { url 'http://download.crashlytics.com/maven' }
}

dependencies {
  compile "com.mobeta.android.dslv:drag-sort-listview:0.6.1"

  // also in 'libs'
  compile 'com.android.support:support-v4:19.0.0'
  compile 'org.jsoup:jsoup:1.7.3'
  compile 'com.crashlytics.android:crashlytics:1.+'
  compile 'commons-validator:commons-validator:1.4.0'
  compile 'com.jeremyfeinstein.slidingmenu:slidingmenu:1.3-SNAPSHOT'

  // jar-dependencies
  compile files('libs/libGoogleAnalyticsServices.jar')
  compile files('libs/ActiveAndroid.jar')
}

android {
  compileSdkVersion 'Google Inc.:Google APIs:19'
  buildToolsVersion '19'

  defaultConfig {
    versionCode getVersionCodeFromManifest()
    versionName 'v' + versionCode
  }

  sourceSets {
    main.manifest.srcFile 'AndroidManifest.xml'
    main.java.srcDirs = ['src']
    main.resources.srcDirs = ['src']
    main.res.srcDirs = ['res']
    main.assets.srcDirs = ['assets']
    instrumentTest.setRoot('tests')
  }
}

task('bumpVersion') << {
  def versionCode = getVersionCodeFromManifest() + 1
  String versionName = 'v' + versionCode
  updateManifest(versionCode, versionName)
  println 'versionCode=' + versionCode + ', versionName=' + versionName
}

def getVersionCodeFromManifest() {
  def manifestFile = file('AndroidManifest.xml')
  assert manifestFile.exists()

  def manifestContent = manifestFile.getText()
  def versionCodeMatcher = manifestContent=~"versionCode=\"(\\d+)\""
  assert versionCodeMatcher.find()

  return Integer.parseInt(versionCodeMatcher.group(1))
}

def updateManifest(versionCode, versionName) {
  def manifestFile = file('AndroidManifest.xml')
  def manifestContent = manifestFile.getText()

  manifestContent = (manifestContent=~"versionCode=\"(\\d+)\"").replaceAll("versionCode=\"" + versionCode + "\"")
  manifestContent = (manifestContent=~"versionName=\"(.+)\"").replaceAll("versionName=\"" + versionName + "\"")
  manifestFile.write(manifestContent)
}